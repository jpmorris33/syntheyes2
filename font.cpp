#include <string.h>
#include <stdlib.h>
#include <stdio.h>
#include "PanelDriver.hpp"
#include "Timing.hpp"

extern Timing *timing;
extern PanelDriver *panel;

static unsigned char fontimg[][8] = {
	// 0 - zero
	{
	0b00000000,
	0b00000010,
	0b00000101,
	0b00000101,
	0b00000101,
	0b00000101,
	0b00000010,
	0b00000000,
	},
	{
	0b00000000,
	0b00000010,
	0b00000110,
	0b00000010,
	0b00000010,
	0b00000010,
	0b00000111,
	0b00000000,
	},
	{
	0b00000000,
	0b00000010,
	0b00000101,
	0b00000001,
	0b00000010,
	0b00000100,
	0b00000111,
	0b00000000,
	},
	{
	0b00000000,
	0b00000110,
	0b00000001,
	0b00000110,
	0b00000001,
	0b00000001,
	0b00000110,
	0b00000000,
	},
	{
	0b00000000,
	0b00000101,
	0b00000101,
	0b00000111,
	0b00000001,
	0b00000001,
	0b00000001,
	0b00000000,
	},
	{
	0b00000000,
	0b00000111,
	0b00000100,
	0b00000111,
	0b00000001,
	0b00000001,
	0b00000110,
	0b00000000,
	},
	{
	0b00000000,
	0b00000111,
	0b00000100,
	0b00000110,
	0b00000101,
	0b00000101,
	0b00000010,
	0b00000000,
	},
	{
	0b00000000,
	0b00000111,
	0b00000001,
	0b00000001,
	0b00000001,
	0b00000001,
	0b00000001,
	0b00000000,
	},
	{
	0b00000000,
	0b00000010,
	0b00000101,
	0b00000010,
	0b00000101,
	0b00000101,
	0b00000010,
	0b00000000,
	},
	{
	0b00000000,
	0b00000010,
	0b00000101,
	0b00000010,
	0b00000001,
	0b00000001,
	0b00000001,
	0b00000000,
	},
	// 10 - space
	{
	0b00000000,
	0b00000000,
	0b00000000,
	0b00000000,
	0b00000000,
	0b00000000,
	0b00000000,
	0b00000000,
	},
	// 11 - A
	{
	0b00000000,
	0b00000111,
	0b00000101,
	0b00000111,
	0b00000101,
	0b00000101,
	0b00000101,
	0b00000000,
	},
	{
	0b00000000,
	0b00000110,
	0b00000101,
	0b00000110,
	0b00000101,
	0b00000101,
	0b00000110,
	0b00000000,
	},
	{
	0b00000000,
	0b00000111,
	0b00000100,
	0b00000100,
	0b00000100,
	0b00000100,
	0b00000111,
	0b00000000,
	},
	{
	0b00000000,
	0b00000110,
	0b00000101,
	0b00000101,
	0b00000101,
	0b00000101,
	0b00000110,
	0b00000000,
	},
	{
	0b00000000,
	0b00000111,
	0b00000100,
	0b00000111,
	0b00000100,
	0b00000100,
	0b00000111,
	0b00000000,
	},
	{
	0b00000000,
	0b00000111,
	0b00000100,
	0b00000111,
	0b00000100,
	0b00000100,
	0b00000100,
	0b00000000,
	},
	{
	0b00000000,
	0b00000111,
	0b00000100,
	0b00000100,
	0b00000101,
	0b00000101,
	0b00000111,
	0b00000000,
	},
	{
	0b00000000,
	0b00000101,
	0b00000101,
	0b00000111,
	0b00000101,
	0b00000101,
	0b00000101,
	0b00000000,
	},
	{
	0b00000000,
	0b00000111,
	0b00000010,
	0b00000010,
	0b00000010,
	0b00000010,
	0b00000111,
	0b00000000,
	},
	{
	0b00000000,
	0b00000111,
	0b00000010,
	0b00000010,
	0b00000010,
	0b00000010,
	0b00000110,
	0b00000000,
	},
	{
	0b00000000,
	0b00000101,
	0b00000101,
	0b00000110,
	0b00000101,
	0b00000101,
	0b00000101,
	0b00000000,
	},
	{
	0b00000000,
	0b00000100,
	0b00000100,
	0b00000100,
	0b00000100,
	0b00000100,
	0b00000111,
	0b00000000,
	},
	{
	0b00000000,
	0b00000101,
	0b00000111,
	0b00000111,
	0b00000101,
	0b00000101,
	0b00000101,
	0b00000000,
	},
	{
	0b00000000,
	0b00000111,
	0b00000101,
	0b00000101,
	0b00000101,
	0b00000101,
	0b00000101,
	0b00000000,
	},
	{
	0b00000000,
	0b00000111,
	0b00000101,
	0b00000101,
	0b00000101,
	0b00000101,
	0b00000111,
	0b00000000,
	},
	{
	0b00000000,
	0b00000111,
	0b00000101,
	0b00000111,
	0b00000100,
	0b00000100,
	0b00000100,
	0b00000000,
	},
	{
	0b00000000,
	0b00000111,
	0b00000101,
	0b00000101,
	0b00000111,
	0b00000111,
	0b00000111,
	0b00000000,
	},
	{
	0b00000000,
	0b00000111,
	0b00000101,
	0b00000110,
	0b00000101,
	0b00000101,
	0b00000101,
	0b00000000,
	},
	{
	0b00000000,
	0b00000111,
	0b00000100,
	0b00000111,
	0b00000001,
	0b00000001,
	0b00000111,
	0b00000000,
	},
	{
	0b00000000,
	0b00000111,
	0b00000010,
	0b00000010,
	0b00000010,
	0b00000010,
	0b00000010,
	0b00000000,
	},
	{
	0b00000000,
	0b00000101,
	0b00000101,
	0b00000101,
	0b00000101,
	0b00000101,
	0b00000111,
	0b00000000,
	},
	{
	0b00000000,
	0b00000101,
	0b00000101,
	0b00000101,
	0b00000101,
	0b00000101,
	0b00000010,
	0b00000000,
	},
	{
	0b00000000,
	0b00000101,
	0b00000101,
	0b00000101,
	0b00000111,
	0b00000111,
	0b00000111,
	0b00000000,
	},
	{
	0b00000000,
	0b00000101,
	0b00000101,
	0b00000010,
	0b00000101,
	0b00000101,
	0b00000101,
	0b00000000,
	},
	{
	0b00000000,
	0b00000101,
	0b00000101,
	0b00000101,
	0b00000010,
	0b00000010,
	0b00000010,
	0b00000000,
	},
	{
	0b00000000,
	0b00000111,
	0b00000001,
	0b00000111,
	0b00000100,
	0b00000100,
	0b00000111,
	0b00000000,
	},
	// 37 - full stop
	{
	0b00000000,
	0b00000000,
	0b00000000,
	0b00000000,
	0b00000000,
	0b00000000,
	0b00000010,
	0b00000000,
	},
	// 38 - comma
	{
	0b00000000,
	0b00000000,
	0b00000000,
	0b00000000,
	0b00000000,
	0b00000000,
	0b00000010,
	0b00000100,
	},
	// 39 - dash
	{
	0b00000000,
	0b00000000,
	0b00000000,
	0b00000111,
	0b00000000,
	0b00000000,
	0b00000000,
	0b00000000,
	},
	// 40 - slash
	{
	0b00000000,
	0b00000001,
	0b00000001,
	0b00000010,
	0b00000010,
	0b00000100,
	0b00000100,
	0b00000000,
	},
	// 41 - colon
	{
	0b00000000,
	0b00000000,
	0b00000000,
	0b00000010,
	0b00000000,
	0b00000010,
	0b00000000,
	0b00000000,
	},
	// 42 - semicolon
	{
	0b00000000,
	0b00000000,
	0b00000000,
	0b00000010,
	0b00000000,
	0b00000010,
	0b00000100,
	0b00000000,
	},
	// 43 - dollar
	{
	0b00000000,
	0b00000010,
	0b00000011,
	0b00000110,
	0b00000011,
	0b00000110,
	0b00000010,
	0b00000000,
	},
	// 44 - (
	{
	0b00000000,
	0b00000010,
	0b00000100,
	0b00000100,
	0b00000100,
	0b00000100,
	0b00000010,
	0b00000000,
	},
	// 45 - )
	{
	0b00000000,
	0b00000010,
	0b00000001,
	0b00000001,
	0b00000001,
	0b00000001,
	0b00000010,
	0b00000000,
	},
	// 46 - [
	{
	0b00000000,
	0b00000110,
	0b00000100,
	0b00000100,
	0b00000100,
	0b00000100,
	0b00000110,
	0b00000000,
	},
	// 47 - ]
	{
	0b00000000,
	0b00000011,
	0b00000001,
	0b00000001,
	0b00000001,
	0b00000001,
	0b00000011,
	0b00000000,
	},
	// 48 - {
	{
	0b00000000,
	0b00000001,
	0b00000010,
	0b00000110,
	0b00000010,
	0b00000010,
	0b00000001,
	0b00000000,
	},
	// 49 - }
	{
	0b00000000,
	0b00000100,
	0b00000010,
	0b00000011,
	0b00000010,
	0b00000010,
	0b00000100,
	0b00000000,
	},
	// 50 - underscore
	{
	0b00000000,
	0b00000000,
	0b00000000,
	0b00000000,
	0b00000000,
	0b00000000,
	0b00000111,
	0b00000000,
	},
	// 51 - plus
	{
	0b00000000,
	0b00000000,
	0b00000010,
	0b00000111,
	0b00000010,
	0b00000000,
	0b00000000,
	0b00000000,
	},
	// 52 - hash
	{
	0b00000000,
	0b00000000,
	0b00000101,
	0b00001111,
	0b00000101,
	0b00001111,
	0b00000101,
	0b00000000,
	},
	// 53 - apostrophe
	{
	0b00000000,
	0b00000010,
	0b00000010,
	0b00000000,
	0b00000000,
	0b00000000,
	0b00000000,
	0b00000000,
	},
	// 54 - quote
	{
	0b00000000,
	0b00000101,
	0b00000101,
	0b00000000,
	0b00000000,
	0b00000000,
	0b00000000,
	0b00000000,
	},
	// 55 - exclamation
	{
	0b00000000,
	0b00000010,
	0b00000010,
	0b00000010,
	0b00000010,
	0b00000000,
	0b00000010,
	0b00000000,
	},
	// 56 - question
	{
	0b00000000,
	0b00000110,
	0b00000001,
	0b00000001,
	0b00000010,
	0b00000000,
	0b00000010,
	0b00000000,
	},
	// 57 - <
	{
	0b00000000,
	0b00000000,
	0b00000010,
	0b00000100,
	0b00000010,
	0b00000000,
	0b00000000,
	0b00000000,
	},
	// 58 - >
	{
	0b00000000,
	0b00000000,
	0b00000010,
	0b00000001,
	0b00000010,
	0b00000000,
	0b00000000,
	0b00000000,
	},
	// 59 - *
	{
	0b00000000,
	0b00000000,
	0b00000101,
	0b00000010,
	0b00000101,
	0b00000000,
	0b00000000,
	0b00000000,
	},
};

static unsigned char fontchar[128];

void initFont() {
	memset(fontchar,10,128); // Default to space
	// Patch in numbers
	for(int ctr=0;ctr<10;ctr++) {
		fontchar['0'+ctr]=ctr;
	}
	// Patch in uppercase
	for(int ctr=0;ctr<26;ctr++) {
		fontchar['A'+ctr]=11+ctr;
	}
	// Patch in lowercase (hack)
	for(int ctr=0;ctr<26;ctr++) {
		fontchar['a'+ctr]=11+ctr;
	}
	fontchar['.']=37;
	fontchar[',']=38;
	fontchar['-']=39;
	fontchar['/']=40;
	fontchar[':']=41;
	fontchar[';']=42;
	fontchar['$']=43;
	fontchar['(']=44;
	fontchar[')']=45;
	fontchar['[']=46;
	fontchar[']']=47;
	fontchar['{']=48;
	fontchar['}']=49;
	fontchar['_']=50;
	fontchar['+']=51;
	fontchar['#']=52;
	fontchar['\'']=53;
	fontchar['\"']=54;
	fontchar['!']=55;
	fontchar['?']=56;
	fontchar['<']=57;
	fontchar['>']=58;
	fontchar['*']=59;
}

void printmsg(const char *msg, unsigned char *outbuf, int w, int h, int x, int y) {
	unsigned char *outptr = &outbuf[0];
	unsigned char fontrow;
	int maxlen = w/4;
	int maxy=8+y;
	int len = strlen(msg);
	// If it won't fit in the buffer, trim it down
	if(len > maxlen) {
		len=maxlen;
	}
	if(maxy>h) {
		maxy=h;
	}

	x >>= 3;

	for(int ctr=0;ctr<len;ctr++) {
		for(int yctr=y;yctr<maxy;yctr++) {
			fontrow = fontimg[fontchar[(unsigned char)msg[ctr]&127]][yctr-y];
			if(!(ctr & 1)) {
				fontrow <<= 4;
			}
			outptr[x + (ctr>>1) + (yctr*(w/8))] |= fontrow;
		}
	}

}

void scrollmsg(const char *msg, int yoffset, uint32_t col) {
	PanelBitmap bmp;
	char fullmsg[2048];
	memset(fullmsg,0,sizeof(fullmsg));
	strcpy(fullmsg,"    ");
	strncat(fullmsg,msg,2040);
	strcat(fullmsg,"    ");

	int len = strlen(fullmsg);

	for(int ctr=0;ctr<len;ctr++) {
		memset(bmp,0,sizeof(bmp));
		printmsg(&fullmsg[ctr],&bmp[0][0],32,16,16,yoffset);
		panel->update_nomirror(bmp, col);
		panel->draw();
		timing->wait_microseconds(1000);
		panel->draw();
		timing->wait_microseconds(100000);
	}
}

void errorMsg(const char *msg) {
	for(int ctr=0;ctr<3;ctr++) {
		scrollmsg(msg,4,0xff1010);
	}
	exit(1);
}

// SynthOS 1.06
PanelBitmap initimg = {
    0b11010101, 0b10111101, 0b11010101, 0b10111101, 
    0b10010101, 0b01010101, 0b10010101, 0b01010101, 
    0b11010101, 0b01010111, 0b11010101, 0b01010111, 
    0b01001001, 0b01010101, 0b01001001, 0b01010101, 
    0b11001001, 0b01010101, 0b11001001, 0b01010101, 
    0b00000000, 0b00000000, 0b00000000, 0b00000000, 
    0b00000000, 0b00000000, 0b00000000, 0b00000000, 
    0b00000000, 0b00000000, 0b00000000, 0b00000000, 
    0b00000000, 0b00000000, 0b00000000, 0b00000000, 
    0b00000000, 0b00000000, 0b00000000, 0b00000000, 
    0b00000000, 0b00000000, 0b00000000, 0b00000000, 
    0b00000000, 0b00000000, 0b00000000, 0b00000000, 
    0b00000000, 0b00000000, 0b00000000, 0b00000000, 
    0b00001101, 0b10101000, 0b01010111, 0b11010111, 
    0b00001001, 0b00101000, 0b00100101, 0b01010010, 
    0b00001001, 0b10010000, 0b01010100, 0b01010010, 
};

void printVersion(const char *version, int duration) {
printmsg(version,&initimg[0][0],32,16,0,5);
printmsg(version,&initimg[0][0],32,16,16,5);
panel->update_nomirror(initimg, 0x808080);

for(int ctr=0;ctr<duration;ctr++) {
	panel->draw();
	timing->wait_microseconds(1000);
}
}
